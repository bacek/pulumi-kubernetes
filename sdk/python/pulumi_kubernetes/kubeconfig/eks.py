# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'EksResult',
    'AwaitableEksResult',
    'eks',
    'eks_output',
]

@pulumi.output_type
class EksResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> str:
        return pulumi.get(self, "result")


class AwaitableEksResult(EksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return EksResult(
            result=self.result)


def eks(profile_name: Optional[str] = None,
        role_arn: Optional[str] = None,
        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableEksResult:
    """
    Generate a kubeconfig for cluster authentication that does not use the default AWS credential provider chain, and instead is scoped to the supported options in `KubeconfigOptions`.

    The kubeconfig generated is automatically stringified for ease of use with the pulumi/kubernetes provider.

    See for more details:
    - https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html
    - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html
    - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html


    :param str profile_name: AWS credential profile name to always use instead of the default AWS credential provider chain.
           
           The profile is passed to kubeconfig as an authentication environment setting.
    :param str role_arn: Role ARN to assume instead of the default AWS credential provider chain.
           
           The role is passed to kubeconfig as an authentication exec argument.
    """
    __args__ = dict()
    __args__['profileName'] = profile_name
    __args__['roleArn'] = role_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kubernetes:kubeconfig:eks', __args__, opts=opts, typ=EksResult).value

    return AwaitableEksResult(
        result=__ret__.result)


@_utilities.lift_output_func(eks)
def eks_output(profile_name: Optional[pulumi.Input[Optional[str]]] = None,
               role_arn: Optional[pulumi.Input[Optional[str]]] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[EksResult]:
    """
    Generate a kubeconfig for cluster authentication that does not use the default AWS credential provider chain, and instead is scoped to the supported options in `KubeconfigOptions`.

    The kubeconfig generated is automatically stringified for ease of use with the pulumi/kubernetes provider.

    See for more details:
    - https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html
    - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html
    - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html


    :param str profile_name: AWS credential profile name to always use instead of the default AWS credential provider chain.
           
           The profile is passed to kubeconfig as an authentication environment setting.
    :param str role_arn: Role ARN to assume instead of the default AWS credential provider chain.
           
           The role is passed to kubeconfig as an authentication exec argument.
    """
    ...
